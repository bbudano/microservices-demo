version: '3.8'

networks:
  microservices:
    name: microservices
    driver: bridge

services:

  postgres:
    container_name: postgres
    image: postgres:14.2-alpine
    volumes:
      - ./docker/postgres:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 5s
    networks:
      - microservices
    ports:
      - "5432:5432"
    hostname: microservices-postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@demo.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider http://localhost/misc/ping || exit 1" ]
      interval: 1m
      timeout: 30s
    restart: always
    networks:
      - microservices
    ports:
      - "15432:80"
    depends_on:
      - postgres

  proxy:
    container_name: proxy
    image: nginx:1.22.1-alpine
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d/demo.conf:/etc/nginx/conf.d/demo.conf
      - ./docker/nginx/ssl/demo.crt:/etc/nginx/ssl/demo.crt
      - ./docker/nginx/ssl/demo.key:/etc/nginx/ssl/demo.key
    healthcheck:
      test: [ "CMD-SHELL", "wget -O /dev/null http://localhost || exit 1" ]
      interval: 30s
      timeout: 5s
    depends_on:
      - api-gateway
    networks:
      - microservices
    ports:
      - "443:443"
    restart: always

  discovery-service:
    container_name: discovery-service
    build: ./discovery-service
    image: discovery-service
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
    restart: always
    networks:
      - microservices
    ports:
      - "8761:8761"

  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    image: api-gateway
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
    restart: always
    networks:
      - microservices
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service

  user-management-service:
    container_name: user-management-service
    build: ./user-management-service
    image: user-management-service
    healthcheck:
      test: "curl --fail --silent http://localhost:8081/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
    restart: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demo
    networks:
      - microservices
    ports:
      - "8081:8081"
    depends_on:
      - api-gateway

volumes:
  postgres:
  pgadmin: